package com.gildedrose;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Nested;

class GildedRoseTest {

    @Test
    void foo() {
        Item[] items = new Item[] { new Item("foo", 0, 0) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals("foo", app.items[0].name);
    }
    
    
    @ParameterizedTest(name="{0} {1} {2} {3} {4}")
	@CsvSource(value= {"'Aged Brie',3,5,2,6"})
    void AgedBrie(String nombre,int sellIn, int quality, int sellOut, int qualityOut) {
        Item[] items = new Item[] { new Item(nombre, sellIn, quality) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        
        assertEquals("Aged Brie", app.items[0].name);
        assertEquals(sellOut, app.items[0].name);
        assertEquals(qualityOut, app.items[0].name);
    }
    
    @Test
    void Backstage() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert", 0, 0) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals("Backstage passes to a TAFKAL80ETC concert", app.items[0].name);
    }
    
    
    @Test
    void Sulfuras() {
        Item[] items = new Item[] { new Item("Sulfuras, Hand of Ragnaros", 0, 0) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals("Sulfuras, Hand of Ragnaros", app.items[0].name);
    }
    
   
    	
    


    

}
